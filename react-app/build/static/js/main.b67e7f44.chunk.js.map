{"version":3,"sources":["components/Forms/Create/Forms.module.css","components/UI/Modal/Modal.module.css","components/Core/Gallery/Gallery.module.css","components/Core/Navigation/Navigation.module.css","components/Core/Navigation/Navigation.js","services/UserService.js","services/ImageService.js","components/UI/SingleImage/SingleImage.js","components/UI/SelectableIcons/SelectableIcons.js","components/Core/Gallery/Gallery.js","components/UI/Modal/Modal.js","components/Forms/Create/CreateFaveCollection.js","components/Forms/Choose/ChooseFaveCollection.js","components/Core/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","props","collection","collectionName","className","classes","navigation","onClick","displayAllImages","updateFaves","showCreateModal","showChooseModal","loadFaveCollection","apiBaseUrl","UserService","addCollection","a","requestOptions","method","headers","body","JSON","stringify","name","account","Math","floor","random","fetch","response","json","getCollection","ImageService","getAllImages","mode","getFaveCollections","addToFaveImages","imageId","imageUrl","accountNum","_id","url","alt","removeFromFaveImages","SingleImage","src","source","SelectableImage","useState","isFavorited","setIsFavorited","useEffect","faveImageData","images","faveImageCheck","map","image","indexOf","showColumn","Fragment","event","stopPropagation","Layout","isFaveCollection","allImageData","imageRef","setImageRef","setShowColumn","scrollIntoView","behavior","block","isLoaded","length","column","grid","index","selectedImageRef","React","createRef","id","key","ref","current","Backdrop","backdrop","onClose","Overlay","modal","content","children","Modal","portalElement","document","getElementById","ReactDOM","createPortal","CreateFave","nameValue","setNameValue","submissionSuccess","setSubmissionSuccess","updateFaveCollectionsList","e","console","log","form","onSubmit","preventDefault","then","result","Boolean","htmlFor","type","onChange","target","value","button","ChooseFave","faveImageCollections","Main","setCollectionName","setFaveImageData","setIsLoaded","setFaveImageCollections","setAllImageData","createModalIsShown","setCreateModalIsShown","chooseModalIsShown","setChooseModalIsShown","setIsFaveCollection","getFaves","trim","App","window","location","hostname","match","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b67e7f44.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Forms_form__2Z1zy\",\"button\":\"Forms_button__1cTfC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Modal_backdrop__3iXHD\",\"modal\":\"Modal_modal__30MRu\",\"slide-down\":\"Modal_slide-down__294fH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Gallery_grid__wKUBe\",\"column\":\"Gallery_column__1afft\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigation\":\"Navigation_navigation__3zdNe\"};","import React from \"react\";\n\nimport classes from \"./Navigation.module.css\";\n\nconst Navigation = (props) => {\n\n  const allMemes = \"All Memes\";\n  const startCollection = \"Start a Collection\";\n  const chooseCollection = \"Choose a Collection\";\n  const faveMemes = \"Fave Memes\";\n\n  const collection = props.collectionName ? props.collectionName : \"\";\n\n  const onAllClickHandler = () => {\n    props.displayAllImages();\n    props.updateFaves();\n  }\n\n  const onFaveClickHandler = () => {\n    props.loadFaveCollection(collection)\n  }\n\n  return (\n    <div className={classes.navigation}>\n      <h1>img</h1>\n      <ul>\n        <li onClick={onAllClickHandler}>{allMemes}</li>\n        <li onClick={props.showCreateModal}>{startCollection}</li>\n        <li onClick={props.showChooseModal}>{chooseCollection}</li>\n        <li onClick={onFaveClickHandler}>{faveMemes}</li>\n      </ul>\n      </div>\n  );\n};\n\nexport default Navigation;\n","// const apiBaseUrl = 'http://localhost:3001/img'; // dev\nconst apiBaseUrl = 'https://meme-server2.herokuapp.com/img'; // prod\n\nconst UserService = {\n\n    addCollection: async function(collectionName) {\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: collectionName,\n                account: Math.floor(100000 + Math.random() * 900000)\n            })\n        }\n        const response = await fetch(apiBaseUrl + '/addCollection', requestOptions)\n        const json = await response.json();\n        return json;\n    },\n\n    getCollection: async function(name) {\n        const response = await fetch(apiBaseUrl + '/favorites/' + name)\n        const json = await response.json();\n        return json;\n    }\n}\n\nexport default UserService\n","// const apiBaseUrl = 'http://localhost:3001/img'; // dev\nconst apiBaseUrl = 'https://meme-server2.herokuapp.com/img'; // prod\n\nconst ImageService = {\n\n    // Get all images\n    getAllImages: async function() {\n        const response = await fetch(apiBaseUrl, {mode: 'cors'});\n        const json = await response.json();\n        return json;\n    },\n\n    // Get fave image collections\n    getFaveCollections: async function() {\n        const response = await fetch(apiBaseUrl+'/favoriteCollectionsList', {mode: 'cors'});\n        const json = await response.json();\n        return json;\n    },\n\n    addToFaveImages: async function(collectionName, imageId, imageUrl, accountNum) {\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: collectionName,\n                _id: imageId,\n                url: imageUrl,\n                account: accountNum,\n                alt: ''\n            })\n        }\n        const response = await fetch(apiBaseUrl + '/addToFavoritesCollection', requestOptions)\n        const json = await response.json();\n        return json;\n    },\n\n    removeFromFaveImages: async function(collectionName, imageId) {\n        const requestOptions = {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: collectionName,\n                _id: imageId\n            })\n        }\n        const response = await fetch(apiBaseUrl + '/removeFromFavoritesCollection/' + collectionName + '/' + imageId, requestOptions)\n        const json = await response.json();\n        return json;\n    }\n}\n\nexport default ImageService\n","import React from \"react\";\n\nconst SingleImage = (props) => {\n  return (\n    <div>\n      <img src={props.source.url} alt={props.source.alt}></img>\n    </div>\n  );\n};\n\nexport default SingleImage;\n","import React, { useState, useEffect } from \"react\";\n\nimport SingleImage from \"../SingleImage/SingleImage\";\nimport \"./SelectableIcons.css\";\nimport ImageService from \"../../../services/ImageService\";\n\nconst SelectableImage = (props) => {\n  const [isFavorited, setIsFavorited] = useState(false);\n\n  const toggleClass = (event) => {\n    const currentState = isFavorited;\n    setIsFavorited(!currentState);\n    if (isFavorited !== true) {\n      ImageService.addToFaveImages(\n        props.collectionName,\n        props.source._id,\n        props.source.url,\n        props.source.account\n      );\n      if (props.showColumn) {\n        event.stopPropagation();\n      } else {\n        props.updateFaves();\n      }\n    } else {\n      ImageService.removeFromFaveImages(props.collectionName, props.source._id);\n      if (props.showColumn) {\n        event.stopPropagation();\n      } else {\n        props.updateFaves();\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (props.faveImageData.images) {\n      const faveImageCheck =\n        props.faveImageData.images\n          .map(function (image) {\n            return image._id;\n          })\n          .indexOf(props.source._id) !== -1;\n      setIsFavorited(faveImageCheck);\n    }\n  }, [props.faveImageData, props.source._id]);\n\n  if (props.collectionName && props.showColumn) {\n    return (\n        <React.Fragment>\n          <SingleImage source={props.source} />\n          <span\n            className={isFavorited === true ? \"fas fa-heart\" : \"far fa-heart\"}\n            onClick={toggleClass}\n          ></span>\n        </React.Fragment>\n    )\n  } else {\n    return ( <SingleImage source={props.source} /> )\n  }\n};\n\nexport default SelectableImage;\n","import React, { useEffect, useState } from \"react\";\n\nimport classes from \"./Gallery.module.css\";\nimport SelectableIcons from \"../../UI/SelectableIcons/SelectableIcons\";\n\nconst Layout = (props) => {\n  let images = props.isFaveCollection\n    ? props.faveImageData.images\n    : props.allImageData;\n\n  const [imageRef, setImageRef] = useState();\n  let [showColumn, setShowColumn] = useState(false);\n\n  const displayColumn = () => {\n    setShowColumn((showColumn = !showColumn));\n\n    if (props.collectionName && showColumn === false) {\n      // if transitioning from column (on faves page),\n      // make call to get updated faves list to display in grid\n      props.updateFaves();\n    }\n  };\n\n  useEffect(() => {\n    if (imageRef && typeof imageRef.scrollIntoView === \"function\") {\n      imageRef.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"start\",\n      });\n    }\n  }, [imageRef]);\n\n  if (!props.isLoaded) {\n    return (\n      <div>\n        <p>Loading... {props.isLoaded}</p>\n      </div>\n    );\n  }\n  if (\n    props.collectionName === \"\" ||\n    (props.isFaveCollection &&\n      props.collectionName &&\n      props.faveImageData.images.length === 0)\n  ) {\n    return (\n      <div>\n        {props.collectionName && <h2>Collection: {props.collectionName}</h2>}\n        <p>No favorite images. Make selections to see them here.</p>\n      </div>\n    );\n  } else {\n    return (\n      <div className={showColumn ? classes.column : classes.grid}>\n        {props.collectionName && <h2>Collection: {props.collectionName}</h2>}\n        <ul>\n          {images.map((image, index) => {\n            const selectedImageRef = React.createRef();\n            return (\n              <li\n                id={index}\n                key={index}\n                ref={selectedImageRef}\n                onClick={() => {\n                  displayColumn();\n                  setImageRef(selectedImageRef.current);\n                }}\n              >\n                <SelectableIcons\n                  source={{ ...image, account: props.faveImageData.account }}\n                  faveImageData={props.faveImageData}\n                  collectionName={props.collectionName}\n                  updateFaves={props.updateFaves}\n                  showColumn={showColumn}\n                />\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n};\n\nexport default Layout;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport classes from \"./Modal.module.css\";\n\nconst Backdrop = (props) => {\n  return <div className={classes.backdrop} onClick={props.onClose}></div>;\n};\n\nconst Overlay = (props) => {\n  return (\n    <div className={classes.modal}>\n      <div className={classes.content}>{props.children}</div>\n    </div>\n  );\n};\n\nconst Modal = (props) => {\n  const portalElement = document.getElementById(\"overlays\");\n\n  return (\n    <React.Fragment>\n      {ReactDOM.createPortal(\n        <Backdrop onClose={props.onClose} />,\n        portalElement\n      )}\n      {ReactDOM.createPortal(\n        <Overlay>{props.children}</Overlay>,\n        portalElement\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default Modal;\n","import React, { useState, useEffect } from \"react\";\nimport Modal from \"../../UI/Modal/Modal\";\nimport UserService from \"../../../services/UserService\";\nimport classes from \"./Forms.module.css\";\n\nconst CreateFave = (props) => {\n  const [nameValue, setNameValue] = useState(\"\");\n  const [submissionSuccess, setSubmissionSuccess] = useState(\"\");\n\n  const handleChange = (event) => {\n    if (event.target.name === \"name\") {\n      setNameValue(event.target.value);\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    UserService.addCollection(nameValue).then((result) => {\n      setSubmissionSuccess(Boolean(result));\n    });\n  };\n\n  // Called after state change (see the handleSubmit setState call above)\n  useEffect(() => {\n    try {\n      if (submissionSuccess) {\n        props.loadFaveCollection(nameValue);\n        props.updateFaveCollectionsList();\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }, [submissionSuccess, nameValue, props]);\n\n  return (\n    <Modal onClose={props.onClose}>\n      <div className={classes.form}>\n        <h3>Create a new favorites folder</h3>\n        <form onSubmit={handleSubmit}>\n          <div>\n            <label htmlFor=\"name\">Add a name:&nbsp;</label>\n            <input type=\"text\" id=\"name\" onChange={handleChange} />\n          </div>\n          <button className={classes.button} type=\"submit\">\n            Submit\n          </button>\n        </form>\n      </div>\n    </Modal>\n  );\n};\n\nexport default CreateFave;\n","import React, { useState } from \"react\";\nimport Modal from \"../../UI/Modal/Modal\";\nimport classes from \"../Create/Forms.module.css\";\n\nconst ChooseFave = (props) => {\n  const [nameValue, setNameValue] = useState(\"\");\n\n  const handleChange = (event) => {\n    if (event.target.name !== \"Select a folder\") {\n      setNameValue(event.target.value);\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (nameValue !== \"\" && nameValue !== \"Select a folder\") {\n      props.loadFaveCollection(nameValue);\n      props.onClose();\n    }\n  };\n\n  return (\n    <Modal onClose={props.onClose}>\n      <div className={classes.form}>\n        <h3>Choose a favorites collection</h3>\n        <form onSubmit={handleSubmit}>\n          <label htmlFor=\"collection\">Select a collection below:&nbsp;</label>\n          <select id=\"collection\" onChange={handleChange}>\n            {props.faveImageCollections.map((collection, key) => {\n              return (\n                <option key={key} value={collection.name}>\n                  {collection.name}\n                </option>\n              );\n            })}\n          </select>\n          <button className={classes.button} type=\"submit\">\n            Submit\n          </button>\n        </form>\n      </div>\n    </Modal>\n  );\n};\n\nexport default ChooseFave;\n","import React, { useState, useEffect } from \"react\";\n\nimport Navigation from \"../Navigation/Navigation\";\nimport UserService from \"../../../services/UserService\";\nimport ImageService from \"../../../services/ImageService\";\nimport Layout from \"../Gallery/Gallery\";\nimport CreateFave from \"../../Forms/Create/CreateFaveCollection\";\nimport ChooseFave from \"../../Forms/Choose/ChooseFaveCollection\";\n\nconst Main = () => {\n  const [collectionName, setCollectionName] = useState();\n  const [faveImageData, setFaveImageData] = useState({\n    images: [],\n    account: null,\n  });\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [faveImageCollections, setFaveImageCollections] = useState([]);\n  const [allImageData, setAllImageData] = useState([]);\n  const [createModalIsShown, setCreateModalIsShown] = useState(false);\n  const [chooseModalIsShown, setChooseModalIsShown] = useState(false);\n  const [isFaveCollection, setIsFaveCollection] = useState(false);\n\n  const showCreateModalHandler = () => {\n    setCreateModalIsShown(true);\n  };\n\n  const hideCreateModalHandler = () => {\n    setCreateModalIsShown(false);\n  };\n\n  const showChooseModalHandler = () => {\n    setChooseModalIsShown(true);\n  };\n\n  const hideChooseModalHandler = () => {\n    setChooseModalIsShown(false);\n  };\n\n  const updateFaves = () => {\n    getFaves(collectionName);\n  };\n\n  const loadFaveCollection = (collection) => {\n    setCollectionName(collection);\n    setIsFaveCollection(true);\n    if (collection.trim().length > 0) {\n      getFaves(collection);\n    }\n  };\n\n  const getFaves = (collection) => {\n    UserService.getCollection(collection).then((result) => {\n      if (result[0]) {\n        setFaveImageData({\n          images: result[0].images,\n          account: result[0].account,\n        });\n      }\n    });\n  };\n\n  const updateFaveCollectionsList = () => {\n    ImageService.getFaveCollections().then(\n      (result) => setFaveImageCollections(result),\n      setIsLoaded(true)\n    );\n  };\n\n  const displayAllImages = () => {\n    if (collectionName === \"\") {\n      setCollectionName(null);\n    }\n    setIsFaveCollection(false);\n  };\n\n  useEffect(() => {\n    // Get all images\n    ImageService.getAllImages().then((result) => {\n      setAllImageData(result);\n    });\n\n    // Get fave image collections\n    updateFaveCollectionsList();\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Navigation\n        collectionName={collectionName}\n        loadFaveCollection={loadFaveCollection}\n        updateFaves={updateFaves}\n        updateFaveCollectionsList={updateFaveCollectionsList}\n        showCreateModal={showCreateModalHandler}\n        showChooseModal={showChooseModalHandler}\n        displayAllImages={displayAllImages}\n      />\n      <Layout\n        allImageData={allImageData}\n        faveImageData={faveImageData}\n        isLoaded={isLoaded}\n        isFaveCollection={isFaveCollection}\n        collectionName={collectionName}\n        updateFaves={updateFaves}\n      />\n      {createModalIsShown && (\n        <CreateFave\n          onClose={hideCreateModalHandler}\n          loadFaveCollection={loadFaveCollection}\n          updateFaveCollectionsList={updateFaveCollectionsList}\n        ></CreateFave>\n      )}\n      {chooseModalIsShown && (\n        <ChooseFave\n          onClose={hideChooseModalHandler}\n          faveImageCollections={faveImageCollections}\n          loadFaveCollection={loadFaveCollection}\n          updateFaveCollectionsList={updateFaveCollectionsList}\n        ></ChooseFave>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default Main;\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nimport Main from './components/Core/Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main></Main>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}